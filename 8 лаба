4


#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

const int SAL = 3; //кол-во месяцев

class Sales // класс, представляющий сведения о выручке от продаж за 3 месяца
{
private:
	float sales[SAL]; // массив из *SAL* чисел, каждое из которых представляет
	// собой выручку от продаж за один месяц
public:
	void getdata()
	{
		for (int j = 1; j <= SAL; j++)
		{
			cout << "\nВведите выручку от продаж в " << j << " месяце: ";
			cin >> sales[j];
		}
	}
	void putdata()const
	{
		for (int j = 1; j <= SAL; j++)
		{
			cout << "\nВыручка от продаж в " << j << " месяце: ";
			cout << sales[j];
		}
	}
};

class Publication // класс, представляющий издание (результат работы издательской компании)
{
private:
	string name; //название издания 
	float price; //цена экземпляра
public:
	void getdata() //Ввод информации
	{
		cout << "Введите название книги: "; cin >> name; cout << "\nЦена: "; cin >> price;
	}

	void putdata()const
	{
		cout << "\nназвание книги: " << name << "\nцена: " << price;
	}
};

class Book : private Sales, private Publication // класс, представляющий бумажную книгу
// (производный от класса, представляющего издание, и от класса со сведениями о выручке от продаж)
{
private:
	int pages; // количество страниц в книге 
public:
	void getdata()
	{
		Publication::getdata();
		cout << "\nвведите кол-во страниц в книге: "; cin >> pages;
		Sales::getdata();
	}
	void putdata()const
	{
		Publication::putdata();
		cout << "\nкол-во страниц в книге: " << pages;
		Sales::putdata();
	}
};
// класс, представляющий аудиокнигу
// (производный от класса, представляющего издание, и от класса со сведениями о выручке от продаж)
class Type : private Sales, private Publication
{
private:
	float time; // время проигрывания аудиокниги в минутах 
public:
	void getdata()
	{
		Publication::getdata();
		cout << "\nвведите время проигрывания аудиокниги в минутах: "; cin >> time;
		Sales::getdata();
	}
	void putdata()const
	{
		Publication::putdata();
		cout << "\nвремя проигрывания аудиокниги в минутах: " << time;
		Sales::putdata();
	}
};
// класс, представляющий издание (книгу) на оптическом диске
// (производный от класса, представляющего издание, и от класса со сведениями о выручке от продаж)
class Disk : private Sales, private Publication
{
private:
	enum etype { CD, DVD }; // тип оптического диска: CD или DVD 
public:
	void getdata()
	{
		etype t_disk;
		char type;
		Publication::getdata();
		cout << "\nТип диска (c/d): "; cin >> type;
		if (type = 'c')
			t_disk = CD;
		else t_disk = DVD;

		Sales::getdata();
	}
	void putdata()const
	{
		Publication::putdata();
		etype t_disk;
		char type;
		cout << "\nТип диска: ";
		if (t_disk = CD)
			cout << "CD";
		else
			cout << "DVD";
		Sales::putdata();
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");
	// создадим объекты для тестирования соответствующих классов
	Book bok; //книга
	Type tp; //аудиокнига
	Disk dk; //оптический диск
	// получим от пользователя данные для тестируемых объектов 
	bok.getdata();
	tp.getdata();
	dk.getdata();
	// выведем на экран данные тестируемых объектов

	cout << "\n" << "класс Книга:: "; bok.putdata();
	cout << "\n" << "класс Аудиокнига: "; tp.putdata();
	cout << "\n" << "класс Диск: "; dk.putdata();
	cout << endl; system("pause");
};




5



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

class Employee //класс Работник
{
protected:
	string name; unsigned int number;
public: void set()
{
	
	cout << "Введите имя: "; cin >> name; 
	cout << "Введите номер: "; cin >> number;
}
	  void get()
	  {
		  cout << "Имя: " << name << endl; cout << "Номер: " << number << endl;
	  }
};
class Employee_ver2 : public Employee
{
protected: //период оплаты работы
	enum period { hourly, weekly, monthly }; period per;
double compensation; public:
	void set_ver2()
	{
		char sb = '0'; set();
		cout << "Введите зарплату: "; cin >> compensation;
		cout << "Введите период оплаты работы служащего (ch, n или m): "; cin >> sb; 
		switch (sb)
		{
		case 'ch': per = hourly; break;
		case 'n': per = weekly; break; 
		case 'm': per = monthly; break;
		default:
			cout << "Нет такого периода! Вводите данные заново\n";

			cin.get(); set_ver2(); break;
		}
	}
	void get_ver2()
	{
		get();
		cout << "Зарплата = " << compensation << endl; cout << "Период оплаты работы служащего: ";
		switch (per)
		{
		case hourly: cout << "почасовая\n"; break; 
		case weekly: cout << "понедельная\n"; break;
		case monthly: cout << "помесячная\n"; break;
		}
	}
};

int main()
{
	setlocale(LC_ALL, "Russian"); Employee_ver2 emp; emp.set_ver2(); emp.get_ver2();
	cout << endl;

}




6





#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

const int LIMIT = 100; // размер массива

// оригинальный класс, реализующий «безопасный» массив 
class safearray
{
private:
int arr[LIMIT]; 
public:
	int& operator[] (int n)
	{
		if (n < 0 || n >= LIMIT)
		{
			cout << "Ошибочный индекс!"; exit(1);
		}
		return arr[n];
	}
};

// новый класс, производный от оригинального класса safearray, реализующий

// возможность определения границ массива 
class safehilo : public safearray
{
private:
	int lowerbound; // нижняя граница индекса массива 
	int upperbound; // верхняя граница индекса массива
public:
	// конструктор с двумя аргументами
	safehilo(int low, int up) : lowerbound(low), upperbound(up)
	{
		// проверим заданные пользователем границы на ошибки
		if (lowerbound > upperbound)
		{
			cout << "Ошибка! Верхняя граница индекса массива не может быть меньше нижней.\n"; exit(1);
		}
		if (upperbound - lowerbound >= LIMIT)
		{
			cout << "Ошибка! В массиве не может быть больше " << LIMIT << L" элементов.\n"; exit(1);
		}
	}

	int& operator[] (int n)
	{
		if (n < lowerbound || n > upperbound)
		{
			cout << "Ошибочный индекс!"; exit(1);
		}

		return safearray::operator[] (n - lowerbound);
		// выражение (n - lowerbound) отображает заданный пользователем индекс в реальный
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");
	int low, up; // для верхней и нижней границ индекса массива

	cout << "Введите нижнюю границу индекса массива : "; cin >> low; 
	cout << "Введите верхнюю границу индекса массива: "; cin >> up;

	safehilo sa1(low, up);

	// задаем значения элементов
	 for (int j = low; j <= up; j++)
	// используем функцию слева от знака присваивания (=) 
		 sa1[j] = j * 10;

	// показываем элементы

	for (int j = low; j <= up; j++)
	{
		// используем функцию справа от знака присваивания (=)
		int temp = sa1[j];
		cout << "Элемент " << j << " равен " << temp << endl;
	}

	return 0;
}





7




#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

class Counter // класс, реализующий счетчик и операцию его инкремента (в префиксной форме)
{
protected:	// заметьте, что тут не следует использовать private
	int count;		// счетчик
public:
	Counter() : count(0)	// конструктор без параметров
	{ }
	Counter(int c) : count(c)	// конструктор с одним параметром
	{ }
	unsigned int get_count() const // получение значения счетчика
	{
		return count;
	}
	Counter operator++()	// увеличить значение счетчика (префиксная форма)
	{
		return Counter(++count);
	}
};
// класс, производный от класса Counter (счетчик), добавляющий операцию
// декремента счетчика (в префиксной форме) 
class CountDn : public Counter
{
public:
	CountDn() : Counter()	// конструктор без параметров
	{ }
	CountDn(int c) : Counter(c)	// конструктор с одним параметром
	{ }
	CountDn operator--() // уменьшить значение счетчика(префиксная форма)
	{
		return CountDn(--count);
	}
};
// новый класс, добавляющий в программу инкремент и декремент счетчика
// в постфиксной форме 
class Postfix : public CountDn
{
public:

	Postfix() : CountDn() // конструктор без параметров
	{}
	Postfix(int c) : CountDn(c) // конструктор с одним параметром
	{}
	Postfix operator++(int) // инкремент (увеличение счетчика) в постфиксной форме
	{
		return Postfix(count++);
	}
	Postfix operator--(int) // декремент (уменьшение счетчика) в постфиксной форме
	{
		return Postfix(count--);
	}
};

int main()
{
	setlocale(LC_ALL, "Russian"); Counter* c1 = new Postfix;
	cout << "\nc1 = " << c1->get_count();
	++* c1; ++* c1; ++* c1;
	cout << "\nc1 = " << c1->get_count(); CountDn* c2 = new Postfix;
	cout << "\nc2 = " << c2->get_count();
	--* c2; --* c2; --* c2;
	cout << "\nc2 = " << c2->get_count(); Postfix c3, c4(10);
	c3 = c4++;
	c3.get_count(); c3 = c4++;
	c3.get_count(); cout << endl; cin.get(); return 0;
}





8



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

class String // класс, представляющий строку (массив символов)
{
protected:
	enum { SZ = 80 }; // максимальный размер строки (нестандартный синтаксис) 
	char str[SZ]; // сама строка
public:
	String() // конструктор без параметров
	{
		str[0] = '\0';
	}
	String(char s[]) //конструктор с одним параметром
	{
		strcpy_s(str, s);

	}
	void display() const // показ строки на экране
	{
		cout << str;
	}
	operator char* () // преобразование объекта класса String к обычной строке (массив типа char)
	{
		return str;
	}
};
class Pstring : public String // класс, представляющий «защищенную» строку (с защитой от переполнения массива символов)
{
public:
	Pstring(char s[]); // конструктор с одним параметром
};
Pstring::Pstring(char s[]) //конструктор для Pstring
{
	if (strlen(s) > SZ - 1)
	{
		for (int j = 0; j < SZ - 1; j++) 
			str[j] = s[j];
		str[SZ - 1] = '\0';
	}
	else
	{
		String(s);
	}
}
// новый класс, добавляющий три метода, с помощью которых можно выделить часть строки и
// присвоить ее другой строке 
class Pstring2 : public Pstring
{
public:
	string left(unsigned int amount) // метод извлекает из заданной строки n символов слева, записывает их в строку
	{
		string temp = "";
		for (int i = 0; i < amount; i++)
		{
			temp += str[i];
		}
		return temp;
	}
	// метод извлекает из заданной строки n символов справа, записывает их в строку 
	string right(unsigned int amount)
	{
		string temp = "";
		int len = strlen(str);

		for (int i = len - amount; i < len; i++)
		{
			temp += str[i];
		}
		return temp;
	}
	string mid(unsigned int amount, unsigned int elementary)// метод извлекает из заданной строки n символов, начиная с позиции mid, записывает
	// их в строку
	{
		string temp = "";
		for (int i = elementary - 1; i < elementary - 1 + amount; i++)
		{
			temp += str[i];
		}
		return temp;
	}
};
int main()
{
	setlocale(LC_ALL, "Russian");
	cout << endl;
}





9




#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

class date // класс, представляющий дату
{
private:
	int day;   // день 
	int month; // месяц 
	int year; // год
public:
	// метод для получения данных класса от пользователя с клавиатуры
	void get()
{
	char slash; // для косой черты
	cout << "Введите день, месяц и год через косую черту (/): ";
	cin >> day >> slash >> month >> slash >> year;
}
// константный метод выводит значения полей на экран 
void display() const
{
	cout << day << "/" << month << "/" << year;
}
};

// класс, представляющий издание (результат работы издательской компании) 
class publication

{
private:
	wstring title; // название издания
	float price; // цена экземпляра издания
public:
	void getdata()
	{
		cout << "\n введите название издания: "; getline(ws(wcin), title);
		cout << " введите цену экземпляра издания: "; cin >> price;
	}
	void putdata() const
	{
		wcout << "\n название издания: " << title;
		cout << "\n цена экземпляра издания: " << price << endl;
	}
};

// новый класс, представляющий издание (результат работы издательской компании)
// (производный от старого класса, представляющего издание) 
class publication2 : public publication
{
private:
	date pub_date; // дата публикации издания 
public:
	void getdata()
	{
		publication::getdata();
		cout << " введите дату публикации издания:\n "; pub_date.get();
	}
	void putdata() const
	{
		publication::putdata();
		cout << L" дата публикации издания: "; pub_date.display(); wcout << endl;
	}
};

//	класс,	представляющий	бумажную	книгу	(производный	от	нового	класса, представляющего издание)
class book : public publication2
{
private:
	int pages; // количество страниц в книге
public:
	void getdata()
	{
		publication2::getdata();
		cout << " введите количество страниц в книге: "; cin >> pages;
	}
	void putdata() const
	{
		publication2::putdata();

		cout << " количество страниц в книге: " << pages << endl;
	}
};

// класс, представляющий аудиокнигу (производный от нового класса, представляющего издание)
class tape : public publication2
{
private:
	float playing_time; // время проигрывания аудиокниги в минутах
public:
	void getdata()
	{
	publication2::getdata();
	cout << " введите время проигрывания аудиокниги в минутах: ";
	cin >> playing_time;
}

		void putdata() const
	{
		publication2::putdata();
		cout << " время проигрывания аудиокниги в минутах: " << playing_time << endl;
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");

	// создадим объекты для тестирования соответствующих классов
	book b1; // бумажная книга
	tape t1; // аудиокнига

	// получим от пользователя данные для тестируемых объектов
	cout << "Ввод данных опубликованной бумажной книги"; b1.getdata(); 
	cout << "\nВвод данных опубликованной аудиокниги"; t1.getdata();

	// выведем на экран данные тестируемых объектов
	cout << "\nДанные опубликованной бумажной книги"; b1.putdata(); 
	cout << "\nДанные опубликованной аудиокниги"; t1.putdata();

	return 0;

}



10




#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;

const int LEN = 80; // максимальная длина строковых переменных 
class student // студент (сведения об образовании)
{
private:

	wchar_t school[LEN]; // название учебного заведения
	wchar_t degree[LEN]; // уровень полученного образования
public:
	void getedu()
	{

		cout << " Введите название учебного заведения: "; wcin >> school; cout << " Введите уровень полученного образования\n";
		cout << " (неполное_высшее, бакалавр, магистр, кандидат_наук): "; wcin >>degree;
	}

	
		void putedu() const
	{
		cout << "\n Учебное заведение: " << school;
		cout << "\n Уровень полученного образования: " << degree;
	}
};

class employee // класс, представляющий работника
{
private:
	wchar_t name[LEN];	// фамилия работника
	unsigned long number; // номер работника
public:
	void getdata()
	{
		cout << "\n Введите фамилию: "; wcin >> name; cout << " Введите номер: "; wcin >> number;
	}
	void putdata() const
	{
		cout << "\n Фамилия: " << name; cout << "\n Номер: " << number;
	}
};

class manager : private employee, private student // управленец
{
private:
	char title[LEN]; // наименование должности, например, «вице-президент» 
	double dues;	// сумма взносов в гольф-клуб
public:
	void getdata()
	{
		employee::getdata();
		cout << " Введите должность: "; cin >> title;
		cout << " Введите сумму взносов в гольф-клуб: "; cin >> dues; student::getedu();
	}
	void putdata() const
	{
		employee::putdata();

		cout << "\n Должность: " << title;
		cout << "\n Сумма взносов в гольф-клуб: " << dues; student::putedu();
	}
};

// новый класс, представляющий управленца высшего звена (производный от класса управленца)
class executive : private manager
{
private:
	double yearly_bonus; // размер годовой премии
	unsigned long shares; // количество акций
public:
	void getdata()
	{
		manager::getdata();
		cout << " Введите размер годовой премии: "; cin >> yearly_bonus; cout << " Введите количество акций: "; cin >> shares;
	}
	void putdata() const
	{
		manager::putdata();
		cout << "\n Размер годовой премии: " << yearly_bonus; cout << "\n Количество акций: " << shares;
	}
};

class scientist : private employee, private student // ученый
{
private:
	int pubs; // количество публикаций
public:
	void getdata()
	{
		employee::getdata();
		cout << " Введите количество публикаций: "; cin >> pubs; student::getedu();
	}
	void putdata() const
	{
		employee::putdata();
		cout << "\n Количество публикаций: " << pubs; student::putedu();
	}
};

class laborer : public employee // рабочий
{ };

int main()

{
	setlocale(LC_ALL, "Russian");

	executive e1; manager m1; scientist s1; laborer l1;

	// получим от пользователя информацию о нескольких работниках
	cout << "Ввод информации об управленце высшего звена";
	e1.getdata(); cout << "\nВвод информации об управленце";	m1.getdata();
	cout << "\nВвод информации об ученом";	s1.getdata(); cout << "\nВвод информации о рабочем";	l1.getdata();

	// выведем полученную информацию на экран
	cout << "\nИнформация об управленце высшего звена"; e1.putdata(); cout << "\nИнформация об управленце";	m1.putdata();
	cout << "\nИнформация об ученом";	s1.putdata(); cout << "\nИнформация о рабочем";	l1.putdata(); cout << endl;

}






11





#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
struct Pair // пара чисел
{

	int x; int y;
};

class Stack	// класс, реализующий стек (базовый класс)
{
protected:	// ЗАМЕТЬТЕ: не private!
//enum { MAX = 7 };	// немного нестандартный синтаксис

 static const int MAX = 7; // количество элементов в массиве
//	(одна	константа	для	всех	объектов,статическая)
	int st[MAX];		// стек в виде массива 
	int top;	// вершина стека
public:
	Stack()	// конструктор
	{
		top = -1;
	}
	void push(int var)	// поместить в стек
	{
		st[++top] = var;
	}

	int pop()	// взять из стека
	{
		return st[top--];
	}
};

class Stack2 : public Stack // класс, реализующий стек (производный класс)
{
public:
	void push(int var)	// поместить в стек
	{
		if (top >= MAX - 1) // если стек полон, то ошибка
		{
			cout << "\nОшибка: стек полон!\n"; exit(1);
		}
		Stack::push(var);	// вызов метода push класса Stack
	}
	int pop()	// взять из стека
	{
		if (top < 0)	// если стек пуст, то ошибка
		{
			cout << "\nОшибка: стек пуст!\n"; exit(1);
		}
		return Stack::pop(); // вызов метода pop класса Stack
	}
};

// новый класс, реализующий стек, работающий с парой чисел (производный от Stack2
 class pairStack : public Stack2
{
public:
	void push(Pair unit) // поместить в стек блок из двух чисел
	{
		Stack2::push(unit.x); // поместить в стек первое число
		Stack2::push(unit.y); // поместить в стек второе число
	}
	Pair pop()	// взять из стека блок из двух чисел
	{
		Pair temp_unit;
		// извлекаем из стека числа в обратном порядке, так как стек организуется
		// по принципу «последним вошёл, первым вышел»
		temp_unit.y = Stack2::pop(); // берем из стека второе число 
		temp_unit.x = Stack2::pop(); // берем из стека первое число 
		return temp_unit;
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");

	Pair p1 = { 23, 56 },	// тестовые пары чисел
		p2 = { 8, 0 },
		p3 = { -34, 5 },
		p4 = { 1003, -345 };

	pairStack s1;	// стек

	s1.push(p1);	// помещаем в стек пары чисел 
	s1.push(p2);
	s1.push(p3);
	
//s1.push(p4);	// ошибка переполнения стека

	Pair p;
	p = s1.pop(); wcout << p.x << L", " << p.y << endl;
	p = s1.pop(); wcout << p.x << L", " << p.y << endl;
	p = s1.pop(); wcout << p.x << L", " << p.y << endl;
	// p = s1.pop(); wcout << p.x << L", " << p.y << endl; // ошибка, так как стек уже пуст

}




12




#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
class sterling // класс, представляющий денежную сумму в старой английской системе
{
protected:
	long pounds;   // фунты
	int shillings; // шиллинги 
	int pences;	// пенсы
public:
	// конструктор без аргументов
	sterling() : pounds(0), shillings(0), pences(0)
	{ }
	// конструктор с одним аргументом
	// (для преобразования десятичных фунтов в денежную сумму в старой системе)
	sterling(double df)
	{

		// в этих формулах используется то обстоятельство, что при присвоении
		//	целочисленной	переменной	вещественного	значения	дробная	часть отбрасывается
		pounds = df;
		shillings = (df - pounds) * 20;
		// в случае пенсов необходимо округление до ближайшего целого (функцияround),
		// а не отбрасывание дробной части
		pences = round(((df - pounds) * 20 - shillings) * 12);

	}


	

	// конструктор с тремя аргументами
	sterling(long ps, int s, int p) : pounds(ps), shillings(s), pences(p)

	{ }
	// метод для получения от пользователя денежной суммы в старой системе
	void getSterling()
	{
		char separator; // для точки, разделяющей фунты, шиллинги и пенсы 
		cout << "Введите сумму (фунты, шиллинги и пенсы через точку): J"; 
		cin >> pounds >> separator >> shillings >> separator >> pences;
	}

	void putSterling() const
	{
		cout << "J" << pounds << "." << shillings << "." << pences;
	}
	// операция преобразования объекта класса (денежной суммы в старой системе)
	// в число типа double (денежную сумму в десятичных фунтах) 
	operator double() const
	{
		// так как в этом арифметическом выражении используются вещественные

			// (по умолчанию это тип double), то результат выражения тоже будет приведен
			// к вещественному типу (double в данном случае) 
		return (pounds + shillings / 20.0 + pences / 240.0);

	}

	
	// перегрузка операции сложения (+) для сложения двух объектов класса
	sterling operator+ (sterling s) const
	{
		// 1) sterling(pounds, shillings, pences) — создание безымянного объекта класса
		// с помощью конструктора с тремя аргументами. Обозначим как s1)

		// 2) double(s1) и double(s) — создание безымянных переменных типа double с
		// помощью операции преобразования объекта класса в число типа double,
		// определенной выше (сумма из старой системы преобразуется в десятичные  фунты

// 3) sterling(double(s1) + double(s)) — создание безымянного объекта класса
	// с помощью конструктора с одним аргументом (из десятичных фунтов в сумму в старой системе)
		return sterling(double(sterling(pounds, shillings, pences)) + double(s));
	}
	// перегрузка операции вычитания (-) для нахождения разности двух объектов класса
	// (результат тоже будет объектом класса) 
	sterling operator- (sterling s) const
	{
		return sterling(double(sterling(pounds, shillings, pences)) - double(s));
	}
	// перегрузка операции умножения (*) для нахождения произведения объекта класса
	// и числа типа double (результатом будет объект класса)
	sterling operator* (double n) const
	{

		return sterling(double(sterling(pounds, shillings, pences)) * n);
	}
	// перегрузка операции деления (/) для нахождения частного от деления объекта
	// класса на другой объект класса (результатом будет число типа double) 
	double operator/ (sterling s) const
	{
		return (double(sterling(pounds, shillings, pences)) / double(s));
	}
	// перегрузка операции деления (/) для нахождения частного от деления объекта
	// класса на число типа double (результатом будет объект класса) 
	sterling operator/ (double n) const
	{
		return sterling(double(sterling(pounds, shillings, pences)) / n);
	}
};

//	новый	класс	(производный	от	оригинального	класса	sterling),	добавляющий возможность
// работы с монетами, представляющими части от пенни (полуфартинг, фартинг, полупенни и т.д.)
class sterfrac : public sterling
{
private:
	int eighths; // количество восьмушек (1/8) пенни

	// возможные значения:
	// 0	(0/8 пенни)
	// 1 — полуфартинг	(1/8 пенни)
	// 2 — фартинг	(2/8 пенни или 1/4 пенни)
	// 3 — фартинг и полуфартинг	(3/8 пенни)
	// 4 — полупенни	(4/8 пенни или 1/2 пенни)
	// 5 — полупенни и полуфартинг	(5/8 пенни)
	// 6 — полупенни и фартинг	(6/8 пенни или 3/4 пенни)
	// 7 — полупенни, фартинг и полуфартинг (7/8 пенни)

public:
	// конструктор без аргументов
	sterfrac() : sterling(), eighths(0)
{ }
// конструктор с одним аргументом
// (для преобразования десятичных фунтов в денежную сумму в старой системе) 
	sterfrac(double df)
{
	// в этих формулах используется то обстоятельство, что при присвоении
	//	целочисленной	переменной	вещественного	значения	дробная	часть отбрасывается
	pounds = df;
	shillings = (df - pounds) * 20;
	pences = ((df - pounds) * 20 - shillings) * 12;
	// round — округление  до ближайшего целого, а  не отбрасывание  дробной части

		eighths = round((((df - pounds) * 20 - shillings) * 12 - pences) * 8);
}
// конструктор с четырьмя аргументами
sterfrac(long ps, int s, int p, int e) : sterling(ps, s, p), eighths(e)
{ }
// метод для получения от пользователя денежной суммы в старой системе 
void getSterling()
{
	char separator; // для точки, разделяющей фунты, шиллинги и пенсы;
	// а также для дефиса и косой черты (/) 
	int num, den; // числитель и знаменатель
	cout << "Введите сумму в формате 'J 9.19.11-1/4': J";
	cin >> pounds >> separator >> shillings >> separator >> pences
		>> separator >> num >> separator >> den;
	// предполагаем, что пользователь вводит только правильные дроби, причем
	// знаменатель может быть равным только 2, 4 или 8, а числитель равен
	// значениям от 0 до 7
	if (den == 2) num = num * 4; 
	if (den == 4) num = num * 2;
	eighths = num;
}
// метод для вывода денежной суммы в старой системе на экран 
void putSterling() const
{
	sterling::putSterling(); cout << "-";
	switch (eighths)
	{
	case 2: cout << "1/4"; break; 
	case 4: cout << "1/2"; break; 
	case 6: cout << "3/4"; break;
	default: cout << eighths << "/8";
	}
}
// операция преобразования объекта класса (денежной суммы в старой системе)
// в число типа double (денежную сумму в десятичных фунтах) 
operator double() const
{
	// формула выведена из соотношения:
	// 1 фунт = 20 шиллингов = 240 пенни (пенсов) = 1920 полуфартингов (восьмушек пенни)
	return (sterling::operator double() + eighths / 1920.0);
}
// перегрузка операции сложения (+) для сложения двух объектов класса
// (результат тоже будет объектом класса) 
sterfrac operator+ (sterfrac s) const
{
	// 1) sterfrac(pounds, shillings, pences, eighths) — создание безымянного объекта
	// класса с помощью конструктора с четырьмя аргументами. Обозначим как s1

	// 2) double(s1) и double(s) — создание безымянных переменных типа double с



	

	// помощью операции преобразования объекта класса в число типа double,
	// определенной выше (сумма из старой системы преобразуется в десятичные фунты)





		// 3) sterfrac(double(s1) + double(s)) — создание безымянного объекта класса
// с помощью конструктора с одним аргументом (из десятичных фунтов в сумму  в старой системе)

	return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) + double(s));

}

// перегрузка операции вычитания (-) для нахождения разности двух объектов класса
// (результат тоже будет объектом класса) 
sterfrac operator- (sterfrac s) const
{
	return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) - double(s));
}
// перегрузка операции умножения (*) для нахождения произведения объекта класса
// и числа типа double (результатом будет объект класса) 
sterfrac operator* (double n) const
{
	return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) * n);
}
// перегрузка операции деления (/) для нахождения частного от деления объекта
// класса на другой объект класса (результатом будет число типа double) 
double operator/ (sterfrac s) const
{
	return (double(sterfrac(pounds, shillings, pences, eighths)) / double(s));
}
// перегрузка операции деления (/) для нахождения частного от деления объекта
// класса на число типа double (результатом будет объект класса) 
sterfrac operator/ (double n) const
{
	return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) / n);
}
};

int main()
{
	setlocale(LC_ALL, "Russian");
	sterfrac s1, s2, s; // денежные суммы в старой английской системе
	double n;	// число типа double

	// запрашиваем у пользователя две денежные суммы в старой английской системе 
	cout << "1. "; s1.getSterling();
	cout << "2. "; s2.getSterling(); cout << endl;



	// покажем эти суммы в десятичных фунтах:

	cout << "1. В десятичных фунтах: " << fixed << setprecision(2) << double(s1) << endl; cout << "2. В десятичных фунтах: " << fixed << setprecision(2) << double(s2) << endl << endl;


		// предположим, что денежные суммы s1 и s2 — выручка фирмы за первый и второй года

		// ее существования, тогда выручка фирмы за 2 этих года составит s: 
	s = s1 + s2;
		cout << "Результат сложения этих сумм: "; s.putSterling(); cout << endl;

	// предположим, что s1 — денежная сумма на нашем расчетном счете, а s2 —
	// денежная сумма, перечисленная для оплаты счета поставщика, тогда у нас на
	// расчетном счете останется денежная сумма s:
	s = s1 - s2;
	cout << "Разность этих сумм: "; s.putSterling(); cout << endl;

	// предположим, что s1 — денежная сумма вклада, который мы положили в банк, и
	// процентная ставка по вкладу согласно договора с банком составляет 5% за год,
	// тогда через год сумма нашего вклада вместе с процентами составит s:
	s = s1 * 1.05;
	cout << "Произведение первой суммы и числа 1,05: "; s.putSterling(); cout << endl;


	// предположим, что s1  — денежная сумма, представляющая расходы на покупку грузовика,
	// а s2 — сумма ежегодной прибыли от его использования, определим тогда
	// число лет n, через которое грузовик окупится:
	n = s1 / s2;
	cout << "Частное от деления первой суммы на вторую: " << n << endl;

	// предположим, что s1  — денежная сумма, представляющая расходы на покупку грузовика,
	// и нам нужно узнать, сколько прибыли s необходимо получать ежегодно от использования
	// этого грузовика, чтобы он окупился за 3,5 года:
	s = s1 / 3.5;
	cout << "Частное от деления первой суммы на число 3,5: "; s.putSterling(); cout << endl;

	return 0;
}

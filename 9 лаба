5



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
// прототипы функций
void addarrays(float*, float*, float*, int); void display(float*, int);

int main()
{
	setlocale(LC_ALL, "Russian");

	const int SIZE = 7; // размер массивов
	// три заданных массива
	float arr1[SIZE] = { 23.1f, 5.67f, 0.32f, 4.0f, 73.213f, 3.5f, 890.1f }, arr2[SIZE] = { 11.23f, 7.32f, 444.0f, 32.12f, 79.3f, 5.321f, 45.09f }, arr3[SIZE];

	// складываем поэлементно массивы arr1 и arr2, результаты сохраняем в arr3 
	addarrays(arr1, arr2, arr3, SIZE);

	// выведем исходные массивы и результат сложения на экран 
	cout << "Первый массив = "; display(arr1, SIZE); cout << endl; cout << "Второй массив = "; display(arr2, SIZE); cout << endl;
	cout << "Результат сложения = "; display(arr3, SIZE); cout << endl;

	return 0;
}

// функция складывает поэлементно два массива и сохраняет результаты в элементах
// третьего массива (N — размер массивов)
void addarrays(float* a1, float* a2, float* a3, int N)
{
	for (int j = 0; j < N; j++)

		*(a3 + j) = *(a1 + j) + *(a2 + j);
}

// функция выводит элементы массива на экран
void display(float* a, int N)
{
	for (int j = 0; j < N; j++)
		cout << *(a + j) << ((j != N - 1) ? ", " : "");
}




6



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
int compwcs(const char*, const char*); // прототип функции
int main()
{
	setlocale(LC_CTYPE, "Russian");
	const char* str1, * str2; // строки для сравнения

	// При сортировке фамилий по возрастанию (то есть по алфавиту) фамилии
	// отсортируются так (фамилия выше (ближе к началу алфавита) считается меньшей):
	// 1. Petrov
	// 2. Архангельский
	// 3. Петров
	// 4. Петровский
	// 5. Сидоров
	// 6. Яковлев
	// 7. сидоров (с прописной буквы)

	str1 = "Сидоров"; str2 = "Петровский"; // результат: 1 (str1 > str2)
	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2) << endl;

	str1 = "Петровский"; str2 = "Сидоров"; // результат: -1 (str1 < str2)
	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2) << endl;

	str1 = "Петров"; str2 = "Петров"; // результат: 0 (str1 == str2)
	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2) << endl;

	str1 = "Петров"; str2 = "Петровский"; // результат: -1 (str1 < str2)
	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2) << endl;

	str1 = "Петровcкий"; str2 = "Петров"; // результат: 1 (str1 > str2)
	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2) << endl;

	// Предположим, оператор ошибся и ввел фамилию с прописной буквы: "сидоров". Такая фамилия
		// в списке станет после всех фамилий, введенных с ЗАГЛАВНОЙ буквы, так как коды
		// прописных букв в Юникоде больше, чем коды ЗАГЛАВНЫХ

		str1 = "сидоров"; str2 = "Яковлев"; // результат: 1 (str1 > str2)

	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2)
		<< endl;

	// Предположим, оператор ввел одну из фамилий латиницей: "Petrov". В списке фамилий
	// фамилии, введенные латиницей, станут выше, чем фамилии, введенные кириллицей, так как
	// коды латинских букв в Юникоде меньше, чем коды кириллических

	str1 = "Petrov"; str2 = "Архангельский"; // результат: -1 (str1 < str2)
	cout << '"' << str1 << "\", \"" << str2 << "\", результат: " << compwcs(str1, str2) << endl;

	return 0;
}

// функция сравнивает две заданные строки и возвращает результат сравнения:
// 0 — строки равны;
// -1 — первая строка меньше второй;
// 1 — первая строка больше второй
int compwcs(const char* s1, const char* s2)
{
	while (*s1 && *s2)	// пока не достигнут конец ни одной из строк,
	{	// сравниваем их посимвольно:
		if (*s1 > *s2)	// если символ первой строки больше символа второй, 
			return 1;		// возвращаем 1 (первая строка больше второй)
		else if (*s1 < *s2) // если символ первой строки меньше символа второй,
			return -1;	// возвращаем -1 (первая строка меньше второй)
		s1++; s2++;	// переходим к следующему символу в каждой из строк
	}

	// если программа дошла сюда, значит был достигнут конец либо одной из строк,
	// либо конец обеих строк одновременно, при этом короткая строка полностью
	// совпадает с началом длинной

	if (!*s1 && !*s2)	// если строки равны по длине и совпадают посимвольно, 
		return 0;		// возвращаем 0 (строки равны)
	else if (!*s1)	// если первая строка короче, а посимвольно строки совпадают,
		return -1;		// возвращаем -1 (первая строка меньше второй)
	else		// если вторая строка короче, а посимвольно строки совпадают, 
		return 1;
}	// возвращаем 1 (первая строка больше второй)




7



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
class person // класс, представляющий человека
{
protected:
	wstring name; // имя человека 
	float salary; // зарплата человека
public:

	void setData()	// получение от пользователя данных объекта
	{
		cout << " введите имя: "; wcin >> name;
		cout << " введите зарплату: "; cin >> salary;
	}
	void printData() const // вывод на экран данных объекта
	{
		setlocale(LC_ALL, "Russian");
		wcout << endl << " Umya: " << name; cout << endl << " зарплата: " << salary;
	}
	float getSalary() const // возврат поля, содержащего зарплату человека
	{
		return salary;
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");

	void salsort(person**, int); // прототип функции сортировки
	person* persPtr[100];	// массив указателей на объекты класса «человек» 
	int n = 0;	// количество людей в массиве
	char choice;	// хранит выбор пользователя ('д'/'н' — «да»/«нет»)

	// создадим список объектов класса «человек», указатели на которые будем
	// хранить в массиве указателей persPtr
	do
	{
		persPtr[n] = new person;	// создаем новый объект cout << "Субъект " << n << endl;
		persPtr[n]->setData();		// получаем от пользователя данные человека 
		n++;	// увеличение счетчика объектов
		cout << "Продолжаем ввод (y/n)? "; // спрашиваем, закончен ли ввод
		cin >> choice;
	} while (choice == 'y');

	cout << "\nНеотсортированный список:"; // выведем полученный от пользователя 
	for (int j = 0; j < n; j++)	// список объектов класса person,
	{		// указатели на которые содержатся в 
		cout << endl << "Субъект " << j; // массиве persPtr 
		(*(persPtr + j))->printData();
	}
	cout << endl;

	salsort(persPtr, n); // отсортируем указатели на объекты класса person
	// в массиве указателей persPtr

	cout << "\nОтсортированный список:"; // выведем тот же список объектов класса 
	for (int j = 0; j < n; j++)	// person после сортировки
	{

		cout << endl << "Субъект " << j; (*(persPtr + j))->printData();
	}
	cout << endl;

	return 0;
}

// функция реализует упорядочивание элементов массива по возрастанию
// (используется «сортировка методом пузырька», по-английски «bubble sort»)
// pp — указатель на массив указателей на объекты класса person;
// n — количество указателей в массиве
void salsort(person** pp, int n)
{
	for (int j = 0; j < n - 1; j++)	// внешний цикл
		for (int k = j + 1; k < n; k++) // внутренний цикл
		// если первый объект больше второго (сравниваются зарплаты людей),
			if ((*(pp + j))->getSalary() > (*(pp + k))->getSalary())
		{
				person* tempptr = *(pp + j); // то меняем указатели на них местами
				*(pp + j) = *(pp + k);	// в массиве указателей
				*(pp + k) = tempptr;

		}
}




8



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
struct link	// элемент списка
{
	int data; // данные
	link* next; // указатель на следующий элемент списка
};

class linklist	// класс, представляющий связный список
{
private:
	link* first;	// указатель на первый элемент списка
public:
	linklist()	// конструктор без аргументов
	{
		first = NULL;
	} // первого элемента пока нет
	void additem(int d); // добавление элемента списка
	void display();	// вывод на экран данных из всех элементов списка
};

void linklist::additem(int d) // добавление элемента списка в его конец
{
	link* newlink = new link; // выделяем память под новый элемент списка 
	newlink->data = d;	// сохраняем в него данные

	newlink->next = NULL;	// новый элемент — последний в списке

	// найдем конец списка, чтобы добавить в него новый элемент 
	if (first)	// если список не пуст,
	{
		link* current = first;	// начинаем поиск с первого элемента
		while (current->next)	// если текущий элемент не является последним, 
			current = current->next; // переходим в цикле к следующему элементу списка
		current->next = newlink;	// вставляем в конец списка новый элемент
	}
else	// иначе, если список пуст
first = newlink;	// вставляем новый элемент первым в списке
}

void linklist::display() // вывод на экран данных из всех элементов списка
{
	link* current = first;		// начинаем с первого элемента 
	while (current)	// пока указатель на текущий элемент
	{		// не равен NULL (что означает конец списка)
		wcout << current->data << endl; // выводим данные
		current = current->next;	// переходим к следующему элементу
	}
}

int main()
{
	setlocale(LC_ALL, "Russian");

	linklist li;	// создаем связный список

	li.additem(25); // добавляем четыре элемента в список 
	li.additem(36);
	li.additem(49);
	li.additem(64);

	li.display(); // выводим весь список

	return 0;

}




9 u 10




#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
const int MAXSIZE = 10, // количество элементов в массиве 
NUMARRAYS = 10; // количество массивов

int main()
{

	setlocale(LC_ALL, "Russian");

	int j, k;	// индексы для обращения к элементам массивов 
	int* ap[NUMARRAYS]; // массив указателей на массивы

	// определим нужное количество массивов нужного размера 
	for (j = 0; j < NUMARRAYS; j++)
	*(ap + j) = new int[MAXSIZE];

	// заполним массивы тестовыми данными 
	for (j = 0; j < NUMARRAYS; j++)
	for (k = 0; k < MAXSIZE; k++)
		*(*(ap + j) + k) = (j * 10 + k) * 10;


	// выведем тестовые данные, хранящиеся в массивах, на экран 
	for (j = 0; j < NUMARRAYS; j++)
	for (k = 0; k < MAXSIZE; k++)
		cout << *(*(ap + j) + k) << ((k == MAXSIZE - 1) ? '\n' : ' ');
	// 
	wcout << ap[j][k] << ((k == MAXSIZE - 1) ? L'\n' : L' '); // так тоже можно


	return 0;
}




11



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
class narrays // класс, представляющий единым массивом n отдельных массивов
{
private:
	const int NUMARRAYS; // количество отдельных массивов
	const int MAXSIZE; // количество элементов в каждом из отдельных массивов 
	int** ap;	// указатель на массив указателей на отдельные массивы типа int
public:
	narrays(int na, int ms) : NUMARRAYS(na), MAXSIZE(ms) // конструктор
	{

		// выделим память под массив указателей на отдельные массивы
		ap = new int* [NUMARRAYS];
		// выделим память под нужное количество отдельных массивов нужного размера

		for (int j = 0; j < NUMARRAYS; j++)
			*(ap + j) = new int[MAXSIZE];
	}
~narrays() // деструктор
	{
	// освобождаем память, выделенную ранее под отдельные массивы 
	for (int j = 0; j < NUMARRAYS; j++)
		delete[] * (ap + j);
	// освобождаем память, выделенную ранее под массив указателей на отдельные массивы
	delete[] ap;
	}

	int& operator[] (int n) // перегрузка операции индексации

	{
		int j = n / MAXSIZE; // номер отдельного массива (целочисленное деление)
		int k = n % MAXSIZE; // индекс элемента в отдельном массиве
		return *(*(ap + j) + k);
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");

	int numarr; // количество отдельных массивов
	int sizearr; // количество элементов в каждом из отдельных массивов

	cout << "Введите количество отдельных массивов (больше 0): "; cin >> numarr;
	cout << "Введите количество элементов в каждом отдельном массиве (больше 0): ";
	cin>> sizearr;
	cout << endl;

	narrays arr(numarr, sizearr); // массив, объединяющий отдельные массивы в одно целое 
	int i;	// индекс единого массива

	// заполним единый массив тестовыми данными 
	for (i = 0; i < numarr * sizearr; i++)
	arr[i] = i * 10;

	// выведем тестовые данные, хранящиеся в едином массиве, на экран 
	for (i = 0; i < numarr * sizearr; i++)
	cout << arr[i] << ((i % sizearr == sizearr - 1) ? '\n' : ' ');


	return 0;
}





12



#include <iostream>
#include <iomanip>
#include <ctype.h>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
using namespace std;
// моделируем ту часть памяти компьютера, которая может хранить только
// вещественные числа типа float
const int fm_SIZE = 100; // размер этой части памяти (количество мест для хранения чисел)
float fmemory[fm_SIZE]; // массив, представляющий часть памяти компьютера
int fmem_top = 0;	// следующее свободное место в этой части памяти компьютера

// моделируем ту часть памяти компьютера, которая может хранить только
// адреса (адреса любых значений в памяти компьютера тоже хранятся в памяти)
const int pm_SIZE = 100; // размер этой части памяти (количество мест для хранения адресов)
int pmemory[pm_SIZE];	// массив, представляющий часть памяти компьютера
int pmem_top = 0;	// следующее свободное место в этой части памяти компьютера

class Float // класс, моделирующий переменную типа float

{
private:
	int addr; // адрес в памяти, по которому хранится значение нашей переменной
	// (в нашей модели это индекс массива, представляющего память компьютера)
public:
	Float(float value)	// конструктор с одним аргументом
	{
		fmemory[fmem_top] = value; // сохраняем значение нашей переменной в «память» 
		addr = fmem_top;	// запоминаем «адрес» нашей переменной в «памяти»
		fmem_top++;	// изменяем индекс, указывающий на следующее свободное место в «памяти»

	}
	int operator& () const // перегрузка операции & получения адреса переменной в памяти
	{
		return addr;
	}
};

class ptrFloat // класс, моделирующий указатель на значение типа float
{
private:
	int addr; // адрес в памяти, по которому хранится значение нашего указателя
	// (в нашей модели это индекс массива, представляющего память компьютера)
public:
	ptrFloat(int value)	// конструктор с одним аргументом
	{
		pmemory[pmem_top] = value; // сохраняем значение нашего указателя в «память»
		addr = pmem_top;	// запоминаем «адрес» нашего указателя в «памяти» 
		pmem_top++;		// изменяем индекс, указывающий на следующее свободное
		// место в «памяти»
	}
	float& operator* () const // перегрузка операции * разыменования указателя
	{
		return fmemory[pmemory[addr]];
	}
};

int main()
{
	setlocale(LC_ALL, "Russian");

	Float var1 = 1.234f; // объявим и инициализируем две «переменные типа Float» 
	Float var2 = 5.678f;

	ptrFloat ptr1 = &var1; // объявим два «указателя на значения типа Float»

	ptrFloat  ptr2 = &var2; // и инициализируем их «адресами» вышеобъявленных «переменных»
	cout << "*ptr1 = " << *ptr1 << endl; // неявно извлечём значения переменных var1 и var2
	cout << "*ptr2 = " << *ptr2 << endl << endl; // и покажем их на экране
	*ptr1 = 7.123f; // присвоим новые значения переменным,
	*ptr2 = 8.456f; // на которые указывают указатели ptr1 и ptr2
	cout << "*ptr1 = " << *ptr1 << endl; // неявно извлечём значения переменных var1 и var2
	cout << "*ptr2 = " << *ptr2 << endl; // и покажем их на экране
	return 0;
}
